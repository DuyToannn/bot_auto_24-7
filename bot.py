from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
import requests
import time
import json
import os
import random
import base64
from login_handler import random_sleep, handle_login


import re
import io
from dotenv import load_dotenv
import pymongo
from pymongo.errors import ConnectionFailure, ServerSelectionTimeoutError
import pytesseract
from PIL import Image
import undetected_chromedriver as uc
if os.getenv("RAILWAY_ENVIRONMENT"):
    pytesseract.pytesseract.tesseract_cmd = "/usr/bin/tesseract"
else:
    # ƒê·∫∑t ƒë∆∞·ªùng d·∫´n local (Windows)
    pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# Load environment variables
load_dotenv()

# MongoDB configuration with error handling
mongo_uri = os.getenv('MONGO_URI')
db = None
collection = None
mongo_client = None

try:
    mongo_client = pymongo.MongoClient(mongo_uri, serverSelectionTimeoutMS=5000)
    mongo_client.admin.command('ping')  # Verify connection
    db = mongo_client['bot_database']
    collection = db['bank_info']
    print("‚úÖ MongoDB connection successful")
except (ConnectionFailure, ServerSelectionTimeoutError) as e:
    print(f"‚ùå MongoDB connection error: {e}")
    print("‚ö†Ô∏è Bot will continue without database functionality")


# Constants
PACKAGE_NAME = "N·∫°p Nhanh 04"
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '')
print(f"üîµ Bot cho {PACKAGE_NAME} ƒëang kh·ªüi ƒë·ªông...")

def send_telegram_message(message):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ö†Ô∏è Thi·∫øu c·∫•u h√¨nh Telegram Bot. Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn.")
        return False
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "HTML"}
    
    try:
        response = requests.post(url, json=payload)
        if response.status_code == 200:
            print("‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn Telegram")
            return True
        else:
            print(f"‚ùå G·ª≠i tin nh·∫Øn Telegram th·∫•t b·∫°i: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i tin nh·∫Øn Telegram: {e}")
        return False

def save_to_database(bank_info):
    if collection is None:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u v√†o database - K·∫øt n·ªëi MongoDB kh√¥ng kh·∫£ d·ª•ng")
        return False
    
    try:
        collection.insert_one(bank_info)
        print("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o MongoDB")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u v√†o database: {e}")
        return False

def check_existing_record(stk):
    if collection is None:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra database - K·∫øt n·ªëi MongoDB kh√¥ng kh·∫£ d·ª•ng")
        return False
    
    try:
        existing_record = collection.find_one({"stk": stk})
        return existing_record is not None
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra database: {e}")
        return False

def get_captcha_text(captcha_base64):
    try:
        image_data = base64.b64decode(captcha_base64.split(',')[1])
        image = Image.open(io.BytesIO(image_data))
        captcha_code = pytesseract.image_to_string(image, config="--psm 8 -c tessedit_char_whitelist=0123456789").strip()
        captcha_code = re.sub(r'\D', '', captcha_code)  # Ch·ªâ l·∫•y s·ªë

        if len(captcha_code) == 4:
            print(f"‚úÖ M√£ x√°c minh nh·∫≠n di·ªán: {captcha_code}")
            return captcha_code
        else:
            print(f"‚ö†Ô∏è M√£ OCR sai ({captcha_code}), th·ª≠ l·∫°i...")
            return None
    except Exception as e:
        print(f"‚ùå L·ªói nh·∫≠n di·ªán m√£ x√°c minh: {e}")
        return None

def run_bot():
    try:
        # S·ª≠ d·ª•ng undetected_chromedriver thay v√¨ selenium webdriver th√¥ng th∆∞·ªùng
        options = uc.ChromeOptions()
        # options.add_argument("--no-sandbox")
        # options.add_argument("--disable-blink-features=AutomationControlled")
        # options.add_argument("--disable-extensions")
        # options.add_argument("--disable-gpu")
        # options.add_argument("--disable-dev-shm-usage")
        # options.add_argument("--enable-javascript")
        # options.add_argument("--window-size=1920,1080")
        # options.add_argument("--disable-dev-tools")  # V√¥ hi·ªáu h√≥a dev tools
        
        # Th√™m c√°c tham s·ªë ƒë·ªÉ gi·∫£ l·∫≠p ng∆∞·ªùi d√πng th·ª±c
        # options.add_experimental_option("excludeSwitches", ["enable-automation"])
        # options.add_experimental_option("useAutomationExtension", False)
        
        # Kh·ªüi t·∫°o tr√¨nh duy·ªát v·ªõi undetected_chromedriver
        driver = uc.Chrome(options=options)
        
        # Th√™m JavaScript ƒë·ªÉ gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        print("‚úÖ ChromeDriver ƒë√£ kh·ªüi ƒë·ªông v·ªõi ch·∫ø ƒë·ªô kh√¥ng ph√°t hi·ªán")
        
        # M·ªü trang web v·ªõi ƒë·ªô tr·ªÖ ng·∫´u nhi√™n
        driver.get(os.getenv("BASE_URL"))
        random_sleep(2, 4)
        
        # Ki·ªÉm tra v√† ƒë√≥ng popup n·∫øu c√≥
        try:
            WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.XPATH, "//span[@ng-click='$ctrl.ok()'][@translate='Common_Closed']"))
            ).click()
            random_sleep(0.5, 1.5)
        except Exception:
            pass

        # Ki·ªÉm tra xem c√≥ c·∫ßn ƒëƒÉng nh·∫≠p kh√¥ng
        if "Login" in driver.current_url:
            login_success = handle_login(driver, get_captcha_text)
            if not login_success:
                return

        # ƒê√£ ƒëƒÉng nh·∫≠p ho·∫∑c kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p, chuy·ªÉn ƒë·∫øn trang n·∫°p ti·ªÅn
        print("üîÑ Chuy·ªÉn ƒë·∫øn trang n·∫°p ti·ªÅn")
        driver.get(os.getenv('DEPOSIT_URL'))
        random_sleep(2, 4)

        # Ki·ªÉm tra v√† ƒë√≥ng popup n·∫øu c√≥
        try:
            popup_close = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.XPATH, "//span[@translate='Common_Closed']"))
            )
            driver.execute_script("arguments[0].click();", popup_close)
            random_sleep(0.5, 1.5)
        except Exception:
            pass

        package_element = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, f"//li[.//h3[contains(text(), '{PACKAGE_NAME}')]]"))
        )
        # Di chuy·ªÉn chu·ªôt ƒë·∫øn ph·∫ßn t·ª≠ tr∆∞·ªõc khi click
        ActionChains(driver).move_to_element(package_element).perform()
        random_sleep(0.5, 1)
        driver.execute_script("window.scrollBy(0, 500);")
        random_sleep(0.5, 1)
        # S·ª≠ d·ª•ng JavaScript ƒë·ªÉ click
        driver.execute_script("arguments[0].click();", package_element)
        random_sleep(1, 2)

        random_amount = random.randint(50, 30000)
        print(f"üí∞ Nh·∫≠p s·ªë ti·ªÅn {random_amount:,}")
        amount_input = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, "//input[@placeholder='Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn']"))
        )
        amount_input.click()
        random_sleep(0.3, 0.8)
        amount_input.clear()
        random_sleep(0.3, 0.8)
        
        # Nh·∫≠p t·ª´ng k√Ω t·ª± s·ªë ti·ªÅn m·ªôt v·ªõi ƒë·ªô tr·ªÖ ng·∫´u nhi√™n
        for char in str(random_amount):
            amount_input.send_keys(char)
            random_sleep(0.05, 0.15)
        
        random_sleep(0.5, 1.5)

        pay_button = WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'Thanh to√°n ngay b√¢y gi·ªù')]"))
        )
        # Di chuy·ªÉn chu·ªôt ƒë·∫øn n√∫t tr∆∞·ªõc khi click
        ActionChains(driver).move_to_element(pay_button).perform()
        random_sleep(0.5, 1)
        # S·ª≠ d·ª•ng JavaScript ƒë·ªÉ click
        driver.execute_script("arguments[0].click();", pay_button)
        random_sleep(2, 4)

        # Chuy·ªÉn sang tab m·ªõi
        WebDriverWait(driver, 60).until(EC.number_of_windows_to_be(2))
        original_window = driver.current_window_handle
        for window_handle in driver.window_handles:
            if window_handle != original_window:
                driver.switch_to.window(window_handle)
                break
        
        random_sleep(1, 3)

        # L·∫•y th√¥ng tin ng√¢n h√†ng
        print("üìã L·∫•y th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng")
        try:
            ho_ten = WebDriverWait(driver, 60).until(
                EC.presence_of_element_located((By.XPATH, "//span[contains(text(), 'Ng∆∞·ªùi nh·∫≠n ti·ªÅn:')]/following-sibling::div[@class='text']/span[@class='value high-light']"))
            ).text
            stk = WebDriverWait(driver, 60).until(
                EC.presence_of_element_located((By.XPATH, "//span[contains(text(), 'S·ªë t√†i kho·∫£n ng√¢n h√†ng:')]/following-sibling::div[@class='text']/span[@class='value high-light']"))
            ).text
            ten_ngan_hang = WebDriverWait(driver, 60).until(
                EC.presence_of_element_located((By.XPATH, "//span[contains(text(), 'T√™n ng√¢n h√†ng:')]/following-sibling::div[@class='text']/span[@class='value']"))
            ).text

            if not ho_ten or not stk or not ten_ngan_hang:
                raise Exception("Th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng kh√¥ng ƒë·∫ßy ƒë·ªß!")
            print(f"‚úÖ ƒê√£ l·∫•y th√¥ng tin: {ho_ten}, {stk}, {ten_ngan_hang}")

            # Ki·ªÉm tra xem STK ƒë√£ t·ªìn t·∫°i trong database ch∆∞a
            if check_existing_record(stk):
                print(f"‚ö†Ô∏è STK {stk} ƒë√£ t·ªìn t·∫°i trong database")
            else:
                bank_info = {
                    "ho_ten": ho_ten,
                    "stk": stk,
                    "ten_ngan_hang": ten_ngan_hang,
                    "goi_nap": PACKAGE_NAME,
                    "timestamp": time.time()
                }
                save_to_database(bank_info)
                
                # G·ª≠i th√¥ng b√°o qua Telegram
                message = f"""
üîî <b>TH√îNG TIN T√ÄI KHO·∫¢N M·ªöI</b>

üë§ <b>H·ªç T√™n:</b> {ho_ten}
üí≥ <b>S·ªë t√†i kho·∫£n:</b> <code>{stk}</code>
üè¶ <b>Ng√¢n h√†ng:</b> {ten_ngan_hang}
üì¶ <b>G√≥i n·∫°p:</b> {PACKAGE_NAME}
                """
                send_telegram_message(message)

        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y th√¥ng tin: {e}")
            raise Exception("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng√¢n h√†ng!")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    finally:
        driver.quit()

if __name__ == "__main__":
    while True:
        try:
            run_bot()
            wait_time = random.uniform(4, 6)
            print(f"üîÑ Ch·ªù {wait_time:.1f} gi√¢y tr∆∞·ªõc khi ch·∫°y l·∫°i...")
            time.sleep(wait_time)
        except KeyboardInterrupt:
            print("\n‚õî ƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh")
            break
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
            time.sleep(5)
