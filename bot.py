from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.options import Options
import requests
import time
import json
import os
import random
import sys
from dotenv import load_dotenv

load_dotenv()

# C·∫•u h√¨nh
COOKIE_ENV_VAR = "COOKIES_JSON"  
WEBHOOK_URL = "https://hooks.zapier.com/hooks/catch/21914696/2ldbgyz/"
PACKAGE_NAME = "N·∫°p Nhanh 04"  

print(f"üîµ Bot cho {PACKAGE_NAME} ƒëang kh·ªüi ƒë·ªông...")

def load_cookies(driver):
    cookies_json = os.getenv(COOKIE_ENV_VAR)
    if cookies_json:
        try:
            cookies = json.loads(cookies_json)
            for cookie in cookies:
                driver.add_cookie(cookie)
            print("‚úÖ Cookie ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng")
        except json.JSONDecodeError as e:
            print(f"‚ùå L·ªói gi·∫£i m√£ JSON: {e}")
    else:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y cookie. S·∫Ω y√™u c·∫ßu ƒëƒÉng nh·∫≠p.")

def save_cookies(driver, cookie_file="cookies.txt"):
    cookies = driver.get_cookies()
    with open(cookie_file, "w") as file:
        json.dump(cookies, file)
    print(f"‚úÖ ƒê√£ l∆∞u cookie v√†o {cookie_file}")

def run_bot():
    # C·∫•u h√¨nh Chrome Options
    chrome_options = Options()
    user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
    chrome_options.add_argument(f"user-agent={user_agent}")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option("useAutomationExtension", False)

    # Kh·ªüi t·∫°o ChromeDriver
    driver = webdriver.Chrome(options=chrome_options)
    print("‚úÖ ChromeDriver ƒë√£ kh·ªüi ƒë·ªông")
    
    try:
        # M·ªü trang g·ªëc
        driver.get(os.getenv('BASE_URL'))
        time.sleep(3)

        # T·∫£i cookie
        load_cookies(driver)
        driver.refresh()
        time.sleep(3)

        # Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        if "Login" in driver.current_url:
            print("‚ö†Ô∏è Cookie kh√¥ng h·ª£p l·ªá. C·∫ßn ƒëƒÉng nh·∫≠p th·ªß c√¥ng!")
            input("üëâ H√£y ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n, sau ƒë√≥ nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            save_cookies(driver)

        print("‚úÖ ƒê√£ ƒëƒÉng nh·∫≠p! Ti·∫øp t·ª•c n·∫°p ti·ªÅn...")

        # M·ªü trang n·∫°p ti·ªÅn
        driver.get(os.getenv('DEPOSIT_URL'))
        time.sleep(3)

        # ƒê√≥ng popup (n·∫øu c√≥)
        try:
            close_popup = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.XPATH, "//div[@class='_9PbX_LFgnXvcTnC_3cq6B']//span[@translate='Common_Closed']"))
            )
            close_popup.click()
        except Exception:
            pass

        # Ch·ªçn g√≥i n·∫°p
        print(f"üìå Ch·ªçn g√≥i n·∫°p: {PACKAGE_NAME}")
        package_element = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, f"//li[.//h3[contains(text(), '{PACKAGE_NAME}')]]"))
        )
        driver.execute_script("window.scrollBy(0, 500);")
        time.sleep(random.uniform(1, 2))
        ActionChains(driver).move_to_element(package_element).click().perform()
        time.sleep(2)

        # Nh·∫≠p s·ªë ti·ªÅn ng·∫´u nhi√™n
        random_amount = random.randint(50, 30000)
        print(f"üí∞ Nh·∫≠p s·ªë ti·ªÅn {random_amount:,}")
        amount_input = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, "//div[@ng-show='!$ctrl.form.payment.amountLock']//input[@placeholder='Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn']"))
        )
        amount_input.clear()
        amount_input.send_keys(str(random_amount))
        time.sleep(1)

        # Nh·∫•n n√∫t thanh to√°n
        try:
            print("üí≥ Nh·∫•n n√∫t Thanh to√°n")
            submit_button = WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'Thanh to√°n ngay b√¢y gi·ªù')]"))
            )
            driver.execute_script("arguments[0].scrollIntoView();", submit_button)
            time.sleep(random.uniform(1.5, 2.5))
            ActionChains(driver).move_to_element(submit_button).click().perform()
            time.sleep(3)
        except Exception as e:
            print(f"‚ùå L·ªói khi nh·∫•n n√∫t Thanh to√°n: {e}")
            raise

        # Chuy·ªÉn sang tab m·ªõi
        WebDriverWait(driver, 60).until(EC.number_of_windows_to_be(2))
        original_window = driver.current_window_handle
        for window_handle in driver.window_handles:
            if window_handle != original_window:
                driver.switch_to.window(window_handle)
                break

        # L·∫•y th√¥ng tin ng√¢n h√†ng
        print("üìã L·∫•y th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng")
        try:
            ho_ten = WebDriverWait(driver, 60).until(
                EC.presence_of_element_located((By.XPATH, "//span[contains(text(), 'Ng∆∞·ªùi nh·∫≠n ti·ªÅn:')]/following-sibling::div[@class='text']/span[@class='value high-light']"))
            ).text
            stk = WebDriverWait(driver, 60).until(
                EC.presence_of_element_located((By.XPATH, "//span[contains(text(), 'S·ªë t√†i kho·∫£n ng√¢n h√†ng:')]/following-sibling::div[@class='text']/span[@class='value high-light']"))
            ).text
            ten_ngan_hang = WebDriverWait(driver, 60).until(
                EC.presence_of_element_located((By.XPATH, "//span[contains(text(), 'T√™n ng√¢n h√†ng:')]/following-sibling::div[@class='text']/span[@class='value']"))
            ).text

            if not ho_ten or not stk or not ten_ngan_hang:
                raise Exception("Th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng kh√¥ng ƒë·∫ßy ƒë·ªß!")
            print(f"‚úÖ ƒê√£ l·∫•y th√¥ng tin: {ho_ten}, {stk}, {ten_ngan_hang}")

        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y th√¥ng tin: {e}")
            raise Exception("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng√¢n h√†ng!")

        # G·ª≠i d·ªØ li·ªáu ƒë·∫øn Zapier
        print("üöÄ G·ª≠i d·ªØ li·ªáu ƒë·∫øn Zapier")
        data = {"ho_ten": ho_ten, "stk": stk, "ten_ngan_hang": ten_ngan_hang, "goi_nap": PACKAGE_NAME}
        response = requests.post(WEBHOOK_URL, json=data)
        if response.status_code == 200:
            print("‚úÖ G·ª≠i d·ªØ li·ªáu th√†nh c√¥ng")
        else:
            print(f"‚ùå G·ª≠i d·ªØ li·ªáu th·∫•t b·∫°i: {response.status_code}")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    finally:
        driver.quit()

if __name__ == "__main__":
    while True:
        try:
            run_bot()
            print("üîÑ Ch·ªù 5 gi√¢y tr∆∞·ªõc khi ch·∫°y l·∫°i...")
            time.sleep(5)
        except KeyboardInterrupt:
            print("\n‚õî ƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh")
            break
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
            time.sleep(5)